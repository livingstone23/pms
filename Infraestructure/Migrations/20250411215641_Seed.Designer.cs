// <auto-generated />
using System;
using Infraestructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infraestructure.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20250411215641_Seed")]
    partial class Seed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Attachment", b =>
                {
                    b.Property<int>("AttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttachmentId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DiscussionId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FileSize")
                        .HasColumnType("int");

                    b.Property<string>("ServerFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("AttachmentId");

                    b.HasIndex("DiscussionId");

                    b.HasIndex("TicketId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Application Bug"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Network Issue"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "User Issue"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Discussion", b =>
                {
                    b.Property<int>("DiscussionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscussionId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DiscussionId");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("Discussions");
                });

            modelBuilder.Entity("Domain.Entities.Priority", b =>
                {
                    b.Property<int>("PriorityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PriorityId"));

                    b.Property<int>("ExpectedDays")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PriorityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PriorityId");

                    b.ToTable("Priorities");

                    b.HasData(
                        new
                        {
                            PriorityId = 1,
                            ExpectedDays = 14,
                            IsActive = true,
                            PriorityName = "Low"
                        },
                        new
                        {
                            PriorityId = 2,
                            ExpectedDays = 7,
                            IsActive = true,
                            PriorityName = "Medium"
                        },
                        new
                        {
                            PriorityId = 3,
                            ExpectedDays = 1,
                            IsActive = true,
                            PriorityName = "High"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            ProductName = "Product 1"
                        },
                        new
                        {
                            ProductId = 2,
                            ProductName = "Product 2"
                        },
                        new
                        {
                            ProductId = 3,
                            ProductName = "Product 3"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"));

                    b.Property<string>("AssignedToId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpectedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PriorityId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("RaisedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RaisedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TicketId");

                    b.HasIndex("AssignedToId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            TicketId = 1,
                            AssignedToId = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            CategoryId = 1,
                            Description = "Description 1",
                            ExpectedDate = new DateTime(2025, 4, 18, 23, 56, 40, 247, DateTimeKind.Local).AddTicks(9754),
                            PriorityId = 1,
                            ProductId = 1,
                            RaisedBy = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            RaisedDate = new DateTime(2025, 4, 11, 23, 56, 40, 247, DateTimeKind.Local).AddTicks(9709),
                            Status = "NEW",
                            Summary = "Ticket 1"
                        },
                        new
                        {
                            TicketId = 2,
                            AssignedToId = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            CategoryId = 2,
                            Description = "Description 2",
                            ExpectedDate = new DateTime(2025, 4, 14, 23, 56, 40, 247, DateTimeKind.Local).AddTicks(9764),
                            PriorityId = 2,
                            ProductId = 2,
                            RaisedBy = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            RaisedDate = new DateTime(2025, 4, 11, 23, 56, 40, 247, DateTimeKind.Local).AddTicks(9762),
                            Status = "OPEN",
                            Summary = "Ticket 2"
                        },
                        new
                        {
                            TicketId = 3,
                            AssignedToId = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            CategoryId = 3,
                            Description = "Description 3",
                            ExpectedDate = new DateTime(2025, 4, 12, 23, 56, 40, 247, DateTimeKind.Local).AddTicks(9769),
                            PriorityId = 3,
                            ProductId = 3,
                            RaisedBy = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            RaisedDate = new DateTime(2025, 4, 11, 23, 56, 40, 247, DateTimeKind.Local).AddTicks(9767),
                            Status = "CLOSED",
                            Summary = "Ticket 3"
                        },
                        new
                        {
                            TicketId = 4,
                            AssignedToId = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            CategoryId = 1,
                            Description = "Description 4",
                            ExpectedDate = new DateTime(2025, 4, 18, 23, 56, 40, 247, DateTimeKind.Local).AddTicks(9773),
                            PriorityId = 1,
                            ProductId = 1,
                            RaisedBy = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            RaisedDate = new DateTime(2025, 4, 11, 23, 56, 40, 247, DateTimeKind.Local).AddTicks(9772),
                            Status = "NEW",
                            Summary = "Ticket 4"
                        },
                        new
                        {
                            TicketId = 5,
                            AssignedToId = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            CategoryId = 2,
                            Description = "Description 5",
                            ExpectedDate = new DateTime(2025, 4, 14, 23, 56, 40, 247, DateTimeKind.Local).AddTicks(9778),
                            PriorityId = 2,
                            ProductId = 2,
                            RaisedBy = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            RaisedDate = new DateTime(2025, 4, 11, 23, 56, 40, 247, DateTimeKind.Local).AddTicks(9776),
                            Status = "OPEN",
                            Summary = "Ticket 5"
                        },
                        new
                        {
                            TicketId = 6,
                            AssignedToId = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            CategoryId = 3,
                            Description = "Description 6",
                            ExpectedDate = new DateTime(2025, 4, 12, 23, 56, 40, 247, DateTimeKind.Local).AddTicks(9782),
                            PriorityId = 3,
                            ProductId = 3,
                            RaisedBy = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            RaisedDate = new DateTime(2025, 4, 11, 23, 56, 40, 247, DateTimeKind.Local).AddTicks(9781),
                            Status = "CLOSED",
                            Summary = "Ticket 6"
                        },
                        new
                        {
                            TicketId = 7,
                            AssignedToId = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            CategoryId = 1,
                            Description = "Description 7",
                            ExpectedDate = new DateTime(2025, 4, 18, 23, 56, 40, 247, DateTimeKind.Local).AddTicks(9786),
                            PriorityId = 1,
                            ProductId = 1,
                            RaisedBy = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            RaisedDate = new DateTime(2025, 4, 11, 23, 56, 40, 247, DateTimeKind.Local).AddTicks(9785),
                            Status = "NEW",
                            Summary = "Ticket 7"
                        },
                        new
                        {
                            TicketId = 8,
                            AssignedToId = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            CategoryId = 2,
                            Description = "Description 8",
                            ExpectedDate = new DateTime(2025, 4, 14, 23, 56, 40, 247, DateTimeKind.Local).AddTicks(9792),
                            PriorityId = 2,
                            ProductId = 2,
                            RaisedBy = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            RaisedDate = new DateTime(2025, 4, 11, 23, 56, 40, 247, DateTimeKind.Local).AddTicks(9790),
                            Status = "OPEN",
                            Summary = "Ticket 8"
                        },
                        new
                        {
                            TicketId = 9,
                            AssignedToId = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            CategoryId = 3,
                            Description = "Description 9",
                            ExpectedDate = new DateTime(2025, 4, 12, 23, 56, 40, 247, DateTimeKind.Local).AddTicks(9796),
                            PriorityId = 3,
                            ProductId = 3,
                            RaisedBy = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            RaisedDate = new DateTime(2025, 4, 11, 23, 56, 40, 247, DateTimeKind.Local).AddTicks(9795),
                            Status = "CLOSED",
                            Summary = "Ticket 9"
                        },
                        new
                        {
                            TicketId = 10,
                            AssignedToId = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            CategoryId = 1,
                            Description = "Description 10",
                            ExpectedDate = new DateTime(2025, 4, 18, 23, 56, 40, 247, DateTimeKind.Local).AddTicks(9801),
                            PriorityId = 1,
                            ProductId = 1,
                            RaisedBy = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            RaisedDate = new DateTime(2025, 4, 11, 23, 56, 40, 247, DateTimeKind.Local).AddTicks(9799),
                            Status = "NEW",
                            Summary = "Ticket 10"
                        },
                        new
                        {
                            TicketId = 11,
                            AssignedToId = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            CategoryId = 2,
                            Description = "Description 11",
                            ExpectedDate = new DateTime(2025, 4, 14, 23, 56, 40, 247, DateTimeKind.Local).AddTicks(9806),
                            PriorityId = 2,
                            ProductId = 2,
                            RaisedBy = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            RaisedDate = new DateTime(2025, 4, 11, 23, 56, 40, 247, DateTimeKind.Local).AddTicks(9804),
                            Status = "OPEN",
                            Summary = "Ticket 11"
                        },
                        new
                        {
                            TicketId = 12,
                            AssignedToId = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            CategoryId = 3,
                            Description = "Description 12",
                            ExpectedDate = new DateTime(2025, 4, 12, 23, 56, 40, 247, DateTimeKind.Local).AddTicks(9810),
                            PriorityId = 3,
                            ProductId = 3,
                            RaisedBy = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            RaisedDate = new DateTime(2025, 4, 11, 23, 56, 40, 247, DateTimeKind.Local).AddTicks(9809),
                            Status = "CLOSED",
                            Summary = "Ticket 12"
                        },
                        new
                        {
                            TicketId = 13,
                            AssignedToId = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            CategoryId = 1,
                            Description = "Description 13",
                            ExpectedDate = new DateTime(2025, 4, 18, 23, 56, 40, 247, DateTimeKind.Local).AddTicks(9815),
                            PriorityId = 1,
                            ProductId = 1,
                            RaisedBy = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            RaisedDate = new DateTime(2025, 4, 11, 23, 56, 40, 247, DateTimeKind.Local).AddTicks(9813),
                            Status = "NEW",
                            Summary = "Ticket 13"
                        },
                        new
                        {
                            TicketId = 14,
                            AssignedToId = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            CategoryId = 2,
                            Description = "Description 14",
                            ExpectedDate = new DateTime(2025, 4, 14, 23, 56, 40, 247, DateTimeKind.Local).AddTicks(9819),
                            PriorityId = 2,
                            ProductId = 2,
                            RaisedBy = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            RaisedDate = new DateTime(2025, 4, 11, 23, 56, 40, 247, DateTimeKind.Local).AddTicks(9818),
                            Status = "OPEN",
                            Summary = "Ticket 14"
                        },
                        new
                        {
                            TicketId = 15,
                            AssignedToId = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            CategoryId = 3,
                            Description = "Description 15",
                            ExpectedDate = new DateTime(2025, 4, 12, 23, 56, 40, 247, DateTimeKind.Local).AddTicks(9824),
                            PriorityId = 3,
                            ProductId = 3,
                            RaisedBy = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            RaisedDate = new DateTime(2025, 4, 11, 23, 56, 40, 247, DateTimeKind.Local).AddTicks(9822),
                            Status = "CLOSED",
                            Summary = "Ticket 15"
                        },
                        new
                        {
                            TicketId = 16,
                            AssignedToId = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            CategoryId = 1,
                            Description = "Description 16",
                            ExpectedDate = new DateTime(2025, 4, 18, 23, 56, 40, 247, DateTimeKind.Local).AddTicks(9828),
                            PriorityId = 1,
                            ProductId = 1,
                            RaisedBy = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            RaisedDate = new DateTime(2025, 4, 11, 23, 56, 40, 247, DateTimeKind.Local).AddTicks(9827),
                            Status = "NEW",
                            Summary = "Ticket 16"
                        },
                        new
                        {
                            TicketId = 17,
                            AssignedToId = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            CategoryId = 2,
                            Description = "Description 17",
                            ExpectedDate = new DateTime(2025, 4, 14, 23, 56, 40, 247, DateTimeKind.Local).AddTicks(9832),
                            PriorityId = 2,
                            ProductId = 2,
                            RaisedBy = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            RaisedDate = new DateTime(2025, 4, 11, 23, 56, 40, 247, DateTimeKind.Local).AddTicks(9831),
                            Status = "OPEN",
                            Summary = "Ticket 17"
                        },
                        new
                        {
                            TicketId = 18,
                            AssignedToId = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            CategoryId = 3,
                            Description = "Description 18",
                            ExpectedDate = new DateTime(2025, 4, 12, 23, 56, 40, 247, DateTimeKind.Local).AddTicks(9837),
                            PriorityId = 3,
                            ProductId = 3,
                            RaisedBy = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            RaisedDate = new DateTime(2025, 4, 11, 23, 56, 40, 247, DateTimeKind.Local).AddTicks(9836),
                            Status = "CLOSED",
                            Summary = "Ticket 18"
                        },
                        new
                        {
                            TicketId = 19,
                            AssignedToId = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            CategoryId = 1,
                            Description = "Description 19",
                            ExpectedDate = new DateTime(2025, 4, 18, 23, 56, 40, 247, DateTimeKind.Local).AddTicks(9842),
                            PriorityId = 1,
                            ProductId = 1,
                            RaisedBy = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            RaisedDate = new DateTime(2025, 4, 11, 23, 56, 40, 247, DateTimeKind.Local).AddTicks(9840),
                            Status = "NEW",
                            Summary = "Ticket 19"
                        },
                        new
                        {
                            TicketId = 20,
                            AssignedToId = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            CategoryId = 2,
                            Description = "Description 20",
                            ExpectedDate = new DateTime(2025, 4, 14, 23, 56, 40, 247, DateTimeKind.Local).AddTicks(9847),
                            PriorityId = 2,
                            ProductId = 2,
                            RaisedBy = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            RaisedDate = new DateTime(2025, 4, 11, 23, 56, 40, 247, DateTimeKind.Local).AddTicks(9845),
                            Status = "OPEN",
                            Summary = "Ticket 20"
                        },
                        new
                        {
                            TicketId = 21,
                            AssignedToId = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            CategoryId = 3,
                            Description = "Description 21",
                            ExpectedDate = new DateTime(2025, 4, 12, 23, 56, 40, 247, DateTimeKind.Local).AddTicks(9852),
                            PriorityId = 3,
                            ProductId = 3,
                            RaisedBy = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            RaisedDate = new DateTime(2025, 4, 11, 23, 56, 40, 247, DateTimeKind.Local).AddTicks(9850),
                            Status = "CLOSED",
                            Summary = "Ticket 21"
                        },
                        new
                        {
                            TicketId = 22,
                            AssignedToId = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            CategoryId = 1,
                            Description = "Description 22",
                            ExpectedDate = new DateTime(2025, 4, 18, 23, 56, 40, 247, DateTimeKind.Local).AddTicks(9856),
                            PriorityId = 1,
                            ProductId = 1,
                            RaisedBy = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            RaisedDate = new DateTime(2025, 4, 11, 23, 56, 40, 247, DateTimeKind.Local).AddTicks(9855),
                            Status = "NEW",
                            Summary = "Ticket 22"
                        },
                        new
                        {
                            TicketId = 23,
                            AssignedToId = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            CategoryId = 2,
                            Description = "Description 23",
                            ExpectedDate = new DateTime(2025, 4, 14, 23, 56, 40, 247, DateTimeKind.Local).AddTicks(9861),
                            PriorityId = 2,
                            ProductId = 2,
                            RaisedBy = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            RaisedDate = new DateTime(2025, 4, 11, 23, 56, 40, 247, DateTimeKind.Local).AddTicks(9860),
                            Status = "OPEN",
                            Summary = "Ticket 23"
                        },
                        new
                        {
                            TicketId = 24,
                            AssignedToId = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            CategoryId = 3,
                            Description = "Description 24",
                            ExpectedDate = new DateTime(2025, 4, 12, 23, 56, 40, 247, DateTimeKind.Local).AddTicks(9866),
                            PriorityId = 3,
                            ProductId = 3,
                            RaisedBy = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            RaisedDate = new DateTime(2025, 4, 11, 23, 56, 40, 247, DateTimeKind.Local).AddTicks(9864),
                            Status = "CLOSED",
                            Summary = "Ticket 24"
                        },
                        new
                        {
                            TicketId = 25,
                            AssignedToId = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            CategoryId = 1,
                            Description = "Description 25",
                            ExpectedDate = new DateTime(2025, 4, 18, 23, 56, 40, 247, DateTimeKind.Local).AddTicks(9870),
                            PriorityId = 1,
                            ProductId = 1,
                            RaisedBy = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            RaisedDate = new DateTime(2025, 4, 11, 23, 56, 40, 247, DateTimeKind.Local).AddTicks(9869),
                            Status = "NEW",
                            Summary = "Ticket 25"
                        },
                        new
                        {
                            TicketId = 26,
                            AssignedToId = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            CategoryId = 2,
                            Description = "Description 26",
                            ExpectedDate = new DateTime(2025, 4, 14, 23, 56, 40, 247, DateTimeKind.Local).AddTicks(9874),
                            PriorityId = 2,
                            ProductId = 2,
                            RaisedBy = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            RaisedDate = new DateTime(2025, 4, 11, 23, 56, 40, 247, DateTimeKind.Local).AddTicks(9873),
                            Status = "OPEN",
                            Summary = "Ticket 26"
                        },
                        new
                        {
                            TicketId = 27,
                            AssignedToId = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            CategoryId = 3,
                            Description = "Description 27",
                            ExpectedDate = new DateTime(2025, 4, 12, 23, 56, 40, 248, DateTimeKind.Local).AddTicks(3),
                            PriorityId = 3,
                            ProductId = 3,
                            RaisedBy = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            RaisedDate = new DateTime(2025, 4, 11, 23, 56, 40, 248, DateTimeKind.Local).AddTicks(1),
                            Status = "CLOSED",
                            Summary = "Ticket 27"
                        },
                        new
                        {
                            TicketId = 28,
                            AssignedToId = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            CategoryId = 1,
                            Description = "Description 28",
                            ExpectedDate = new DateTime(2025, 4, 18, 23, 56, 40, 248, DateTimeKind.Local).AddTicks(8),
                            PriorityId = 1,
                            ProductId = 1,
                            RaisedBy = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            RaisedDate = new DateTime(2025, 4, 11, 23, 56, 40, 248, DateTimeKind.Local).AddTicks(7),
                            Status = "NEW",
                            Summary = "Ticket 28"
                        },
                        new
                        {
                            TicketId = 29,
                            AssignedToId = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            CategoryId = 2,
                            Description = "Description 29",
                            ExpectedDate = new DateTime(2025, 4, 14, 23, 56, 40, 248, DateTimeKind.Local).AddTicks(12),
                            PriorityId = 2,
                            ProductId = 2,
                            RaisedBy = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            RaisedDate = new DateTime(2025, 4, 11, 23, 56, 40, 248, DateTimeKind.Local).AddTicks(11),
                            Status = "OPEN",
                            Summary = "Ticket 29"
                        },
                        new
                        {
                            TicketId = 30,
                            AssignedToId = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            CategoryId = 3,
                            Description = "Description 30",
                            ExpectedDate = new DateTime(2025, 4, 12, 23, 56, 40, 248, DateTimeKind.Local).AddTicks(17),
                            PriorityId = 3,
                            ProductId = 3,
                            RaisedBy = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            RaisedDate = new DateTime(2025, 4, 11, 23, 56, 40, 248, DateTimeKind.Local).AddTicks(16),
                            Status = "CLOSED",
                            Summary = "Ticket 30"
                        },
                        new
                        {
                            TicketId = 31,
                            AssignedToId = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            CategoryId = 1,
                            Description = "Description 31",
                            ExpectedDate = new DateTime(2025, 4, 18, 23, 56, 40, 248, DateTimeKind.Local).AddTicks(22),
                            PriorityId = 1,
                            ProductId = 1,
                            RaisedBy = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            RaisedDate = new DateTime(2025, 4, 11, 23, 56, 40, 248, DateTimeKind.Local).AddTicks(21),
                            Status = "NEW",
                            Summary = "Ticket 31"
                        },
                        new
                        {
                            TicketId = 32,
                            AssignedToId = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            CategoryId = 2,
                            Description = "Description 32",
                            ExpectedDate = new DateTime(2025, 4, 14, 23, 56, 40, 248, DateTimeKind.Local).AddTicks(27),
                            PriorityId = 2,
                            ProductId = 2,
                            RaisedBy = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            RaisedDate = new DateTime(2025, 4, 11, 23, 56, 40, 248, DateTimeKind.Local).AddTicks(25),
                            Status = "OPEN",
                            Summary = "Ticket 32"
                        },
                        new
                        {
                            TicketId = 33,
                            AssignedToId = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            CategoryId = 3,
                            Description = "Description 33",
                            ExpectedDate = new DateTime(2025, 4, 12, 23, 56, 40, 248, DateTimeKind.Local).AddTicks(32),
                            PriorityId = 3,
                            ProductId = 3,
                            RaisedBy = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            RaisedDate = new DateTime(2025, 4, 11, 23, 56, 40, 248, DateTimeKind.Local).AddTicks(31),
                            Status = "CLOSED",
                            Summary = "Ticket 33"
                        },
                        new
                        {
                            TicketId = 34,
                            AssignedToId = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            CategoryId = 1,
                            Description = "Description 34",
                            ExpectedDate = new DateTime(2025, 4, 18, 23, 56, 40, 248, DateTimeKind.Local).AddTicks(37),
                            PriorityId = 1,
                            ProductId = 1,
                            RaisedBy = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            RaisedDate = new DateTime(2025, 4, 11, 23, 56, 40, 248, DateTimeKind.Local).AddTicks(36),
                            Status = "NEW",
                            Summary = "Ticket 34"
                        },
                        new
                        {
                            TicketId = 35,
                            AssignedToId = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            CategoryId = 2,
                            Description = "Description 35",
                            ExpectedDate = new DateTime(2025, 4, 14, 23, 56, 40, 248, DateTimeKind.Local).AddTicks(42),
                            PriorityId = 2,
                            ProductId = 2,
                            RaisedBy = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            RaisedDate = new DateTime(2025, 4, 11, 23, 56, 40, 248, DateTimeKind.Local).AddTicks(41),
                            Status = "OPEN",
                            Summary = "Ticket 35"
                        },
                        new
                        {
                            TicketId = 36,
                            AssignedToId = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            CategoryId = 3,
                            Description = "Description 36",
                            ExpectedDate = new DateTime(2025, 4, 12, 23, 56, 40, 248, DateTimeKind.Local).AddTicks(48),
                            PriorityId = 3,
                            ProductId = 3,
                            RaisedBy = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            RaisedDate = new DateTime(2025, 4, 11, 23, 56, 40, 248, DateTimeKind.Local).AddTicks(46),
                            Status = "CLOSED",
                            Summary = "Ticket 36"
                        },
                        new
                        {
                            TicketId = 37,
                            AssignedToId = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            CategoryId = 1,
                            Description = "Description 37",
                            ExpectedDate = new DateTime(2025, 4, 18, 23, 56, 40, 248, DateTimeKind.Local).AddTicks(53),
                            PriorityId = 1,
                            ProductId = 1,
                            RaisedBy = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            RaisedDate = new DateTime(2025, 4, 11, 23, 56, 40, 248, DateTimeKind.Local).AddTicks(51),
                            Status = "NEW",
                            Summary = "Ticket 37"
                        },
                        new
                        {
                            TicketId = 38,
                            AssignedToId = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            CategoryId = 2,
                            Description = "Description 38",
                            ExpectedDate = new DateTime(2025, 4, 14, 23, 56, 40, 248, DateTimeKind.Local).AddTicks(58),
                            PriorityId = 2,
                            ProductId = 2,
                            RaisedBy = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            RaisedDate = new DateTime(2025, 4, 11, 23, 56, 40, 248, DateTimeKind.Local).AddTicks(56),
                            Status = "OPEN",
                            Summary = "Ticket 38"
                        },
                        new
                        {
                            TicketId = 39,
                            AssignedToId = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            CategoryId = 3,
                            Description = "Description 39",
                            ExpectedDate = new DateTime(2025, 4, 12, 23, 56, 40, 248, DateTimeKind.Local).AddTicks(63),
                            PriorityId = 3,
                            ProductId = 3,
                            RaisedBy = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            RaisedDate = new DateTime(2025, 4, 11, 23, 56, 40, 248, DateTimeKind.Local).AddTicks(61),
                            Status = "CLOSED",
                            Summary = "Ticket 39"
                        },
                        new
                        {
                            TicketId = 40,
                            AssignedToId = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            CategoryId = 1,
                            Description = "Description 40",
                            ExpectedDate = new DateTime(2025, 4, 18, 23, 56, 40, 248, DateTimeKind.Local).AddTicks(68),
                            PriorityId = 1,
                            ProductId = 1,
                            RaisedBy = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            RaisedDate = new DateTime(2025, 4, 11, 23, 56, 40, 248, DateTimeKind.Local).AddTicks(66),
                            Status = "NEW",
                            Summary = "Ticket 40"
                        },
                        new
                        {
                            TicketId = 41,
                            AssignedToId = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            CategoryId = 2,
                            Description = "Description 41",
                            ExpectedDate = new DateTime(2025, 4, 14, 23, 56, 40, 248, DateTimeKind.Local).AddTicks(73),
                            PriorityId = 2,
                            ProductId = 2,
                            RaisedBy = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            RaisedDate = new DateTime(2025, 4, 11, 23, 56, 40, 248, DateTimeKind.Local).AddTicks(71),
                            Status = "OPEN",
                            Summary = "Ticket 41"
                        },
                        new
                        {
                            TicketId = 42,
                            AssignedToId = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            CategoryId = 3,
                            Description = "Description 42",
                            ExpectedDate = new DateTime(2025, 4, 12, 23, 56, 40, 248, DateTimeKind.Local).AddTicks(78),
                            PriorityId = 3,
                            ProductId = 3,
                            RaisedBy = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            RaisedDate = new DateTime(2025, 4, 11, 23, 56, 40, 248, DateTimeKind.Local).AddTicks(76),
                            Status = "CLOSED",
                            Summary = "Ticket 42"
                        },
                        new
                        {
                            TicketId = 43,
                            AssignedToId = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            CategoryId = 1,
                            Description = "Description 43",
                            ExpectedDate = new DateTime(2025, 4, 18, 23, 56, 40, 248, DateTimeKind.Local).AddTicks(83),
                            PriorityId = 1,
                            ProductId = 1,
                            RaisedBy = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            RaisedDate = new DateTime(2025, 4, 11, 23, 56, 40, 248, DateTimeKind.Local).AddTicks(81),
                            Status = "NEW",
                            Summary = "Ticket 43"
                        },
                        new
                        {
                            TicketId = 44,
                            AssignedToId = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            CategoryId = 2,
                            Description = "Description 44",
                            ExpectedDate = new DateTime(2025, 4, 14, 23, 56, 40, 248, DateTimeKind.Local).AddTicks(87),
                            PriorityId = 2,
                            ProductId = 2,
                            RaisedBy = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            RaisedDate = new DateTime(2025, 4, 11, 23, 56, 40, 248, DateTimeKind.Local).AddTicks(85),
                            Status = "OPEN",
                            Summary = "Ticket 44"
                        },
                        new
                        {
                            TicketId = 45,
                            AssignedToId = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            CategoryId = 3,
                            Description = "Description 45",
                            ExpectedDate = new DateTime(2025, 4, 12, 23, 56, 40, 248, DateTimeKind.Local).AddTicks(91),
                            PriorityId = 3,
                            ProductId = 3,
                            RaisedBy = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            RaisedDate = new DateTime(2025, 4, 11, 23, 56, 40, 248, DateTimeKind.Local).AddTicks(90),
                            Status = "CLOSED",
                            Summary = "Ticket 45"
                        },
                        new
                        {
                            TicketId = 46,
                            AssignedToId = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            CategoryId = 1,
                            Description = "Description 46",
                            ExpectedDate = new DateTime(2025, 4, 18, 23, 56, 40, 248, DateTimeKind.Local).AddTicks(96),
                            PriorityId = 1,
                            ProductId = 1,
                            RaisedBy = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            RaisedDate = new DateTime(2025, 4, 11, 23, 56, 40, 248, DateTimeKind.Local).AddTicks(95),
                            Status = "NEW",
                            Summary = "Ticket 46"
                        },
                        new
                        {
                            TicketId = 47,
                            AssignedToId = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            CategoryId = 2,
                            Description = "Description 47",
                            ExpectedDate = new DateTime(2025, 4, 14, 23, 56, 40, 248, DateTimeKind.Local).AddTicks(101),
                            PriorityId = 2,
                            ProductId = 2,
                            RaisedBy = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            RaisedDate = new DateTime(2025, 4, 11, 23, 56, 40, 248, DateTimeKind.Local).AddTicks(100),
                            Status = "OPEN",
                            Summary = "Ticket 47"
                        },
                        new
                        {
                            TicketId = 48,
                            AssignedToId = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            CategoryId = 3,
                            Description = "Description 48",
                            ExpectedDate = new DateTime(2025, 4, 12, 23, 56, 40, 248, DateTimeKind.Local).AddTicks(106),
                            PriorityId = 3,
                            ProductId = 3,
                            RaisedBy = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            RaisedDate = new DateTime(2025, 4, 11, 23, 56, 40, 248, DateTimeKind.Local).AddTicks(104),
                            Status = "CLOSED",
                            Summary = "Ticket 48"
                        },
                        new
                        {
                            TicketId = 49,
                            AssignedToId = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            CategoryId = 1,
                            Description = "Description 49",
                            ExpectedDate = new DateTime(2025, 4, 18, 23, 56, 40, 248, DateTimeKind.Local).AddTicks(110),
                            PriorityId = 1,
                            ProductId = 1,
                            RaisedBy = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            RaisedDate = new DateTime(2025, 4, 11, 23, 56, 40, 248, DateTimeKind.Local).AddTicks(108),
                            Status = "NEW",
                            Summary = "Ticket 49"
                        },
                        new
                        {
                            TicketId = 50,
                            AssignedToId = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            CategoryId = 2,
                            Description = "Description 50",
                            ExpectedDate = new DateTime(2025, 4, 14, 23, 56, 40, 248, DateTimeKind.Local).AddTicks(114),
                            PriorityId = 2,
                            ProductId = 2,
                            RaisedBy = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            RaisedDate = new DateTime(2025, 4, 11, 23, 56, 40, 248, DateTimeKind.Local).AddTicks(113),
                            Status = "OPEN",
                            Summary = "Ticket 50"
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("AccountConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "62f94fe7-0580-42df-969c-4b0f1a2c3d7e",
                            AccessFailedCount = 0,
                            AccountConfirmed = false,
                            ConcurrencyStamp = "a0b11176-9b14-4237-941f-ed6a8cb8e538",
                            Email = "Test@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@GMAIL.COM",
                            NormalizedUserName = "TEST@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBUcmlRc65SsOpk+WU2BVpLa1KiKBPuAU0BWimYfnV/qiPjdGDOfH2PyfU08vVJjjQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1bb6df77-849f-4aa7-9404-80e61f4f914b",
                            TwoFactorEnabled = false,
                            UserName = "Test@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Attachment", b =>
                {
                    b.HasOne("Domain.Entities.Discussion", "Discussion")
                        .WithMany("Attachments")
                        .HasForeignKey("DiscussionId");

                    b.HasOne("Domain.Entities.Ticket", "Ticket")
                        .WithMany("Attachments")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discussion");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Domain.Entities.Discussion", b =>
                {
                    b.HasOne("Domain.Entities.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Ticket", b =>
                {
                    b.HasOne("Domain.Entities.User", "AssignedTo")
                        .WithMany()
                        .HasForeignKey("AssignedToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Priority", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AssignedTo");

                    b.Navigation("Category");

                    b.Navigation("Priority");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Discussion", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("Domain.Entities.Ticket", b =>
                {
                    b.Navigation("Attachments");
                });
#pragma warning restore 612, 618
        }
    }
}
