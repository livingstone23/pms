@page "/identity/account/login"



<div class="container">
    <div class="row">
        <div class="col-lg-6">
            <EditForm Enfance Model="User" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator/>
                <ValidationSummary/>
                <div class="card">
                    <div class="card-header text-center fs-5 mb-2">Fill this form to Login</div>

                    <div class="card-body">
                        <div class="form-group mt-3">
                            <label class="form-label">Email</label>
                            <InputText @bind-Value="User.Email" class="form-control"></InputText>
                        </div>
                        <div class="form-group mt-3">
                            <label class="form-label">Password</label>
                            <input type="password" @bind="User.Password" class="form-control" />
                        </div>
                        <div class="form-group mt-3">
                            <button class="btn btn-outline-primary float-end" type="submit">Login</button>
                        </div>
                    </div>
                    <div class="card-footer">
                        <span class="text-center">
                            Don`t have account? |
                            <a class="btn-link" href="identity/account/register">Sign Up</a>
                        </span>
                    </div>

                </div>
            </EditForm>
        </div>     
        <div class="col-lg-4"></div>
    </div>
</div>

@code {

    //public bool ShowLoadingButton { get; set; } = false;
    
    // private FluentDialog? _myFluentDialog;

    // [CascadingParameter]
    // public Task<AuthenticationState> AuthenticationState { get; set; }

    // protected async override Task OnInitializedAsync()
    // {
    //     await CheckUserAuthentication();
    // }

    Login User = new();

    async Task HandleLogin()
    {
        //ShowLoadingButton = true;

        var result = await accountService.SignInAsync(User);
        if (result.Flag)
        {
            //await DisplayDialog(result.Message, "Login Success");
            var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(new UserSession()
                {
                    Token = result.Token,
                    RefreshToken = result.RefreshToken
                });
            NavManager.NavigateTo("/", forceLoad: true);
        }
        // else
        // {
        //     await DisplayDialog(result.Message, "Alert");
        // }

        //ShowLoadingButton = false;
    }

    // private async Task DisplayDialog(string content, string title)
    // {
    //     if (title == "Alert")
    //         await DialogService.ShowWarningAsync(content);
    //     if (title == "Login Success")
    //     {
    //         var dialog = await DialogService.ShowSuccessAsync(content);
    //         await dialog.Result;
    //     }
    // }

    // private async Task CheckUserAuthentication()
    // {
    //     var user = (await AuthenticationState).User;
    //     bool isUserAuthenticated = user.Identity!.IsAuthenticated;

    //     if (isUserAuthenticated)
    //         NavManager.NavigateTo("/home/dashboard");
    // }
}
