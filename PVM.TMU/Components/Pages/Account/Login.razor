@page "/login"
@using System.ComponentModel.DataAnnotations
@using Domain.Entities
@using Domain.Interfaces
@using Microsoft.AspNetCore.Identity

@inject IAccountService accountService;
@inject SignInManager<User> signInManager;
@inject NavigationManager navigationManager


<h1>Login</h1>


<div class="row">
    <div class="col-md-4">
        <section>
            <EditForm Model="Input" method="post" OnValidSubmit="OnLogin" FormName="Login">
                    
                    <DataAnnotationsValidator />
                    
                    <hr />
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.Email" class="form-control" aria-required="true" placeholder="Email"/>
                        <label for="email" class="form-label">Email</label>
                        <ValidationMessage For="@(() => Input.Email)" class="text-danger"/>
                    </div>

                    <div class="form-floating mb-3">
                        <InputText type="password" @bind-Value="Input.Password" class="form-control" aria-required="true" placeholder="Password"/>
                        <label for="password" class="form-label">Password</label>
                        <ValidationMessage For="@(() => Input.Password)" class="text-danger"/>
                    </div>

                    <div class="form-floating mb-3">
                        <InputCheckbox @bind-Value="Input.Remember"/>
                        Remember Me
                    </div>

                    <div>
                        <button type="submit" class="w-100 button btn-Login btn-primary">Login</button>
                    </div>

            </EditForm>
        </section>
    </div>
</div>

@code {

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();


    protected override async Task OnInitializedAsync()
    {
        await accountService.RegisterUser(new Domain.DTO.Request.RegisterUserRequest
        {
            Email = "test@gmail.com",
            Role = "Admin"
        });
    }

    private async Task OnLogin()
    {
        var verify = await accountService.VerifyUser(Input.Email, Input.Password);
        if (!verify.IsSuccess)
        {
            //Alert
            return;
        }
        
        await signInManager.PasswordSignInAsync(verify.Value, Input.Password, Input.Remember, false);
        navigationManager.NavigateTo("/");

    }


    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email {get;set;} = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password {get;set;} = "";

        public bool Remember { get; set; } = false;

    }


}
